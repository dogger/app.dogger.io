name: Docker

on:
  push:
    branches:
      - master

    tags:
      - v*

  pull_request:

jobs:
  test:
    name: Run all tests
    runs-on: ubuntu-latest

    steps:      
      - name: 'Block concurrent executions'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

#      - name: Run tests
#        working-directory: ./src
#        run: |
#          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml build
#          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml config
#
#          docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml down
#          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from=dogger-tests --scale dogger-setup-tests=0 --scale dogger=0
#          
#          docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml down
#          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from=dogger-setup-tests --scale dogger-tests=0 --scale dogger=0
#
#      - name: Code coverage reporting for Dogger
#        uses: codecov/codecov-action@v1
#        with:
#          file: ./src/TestResults/Dogger/coverage.opencover.xml
#
#      - name: Code coverage reporting for Dogger.Setup
#        uses: codecov/codecov-action@v1
#        with:
#          file: ./src/TestResults/Dogger.Setup/coverage.opencover.xml

  publish-app-dogger-io:
    name: Publish app-dogger-io
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'master')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Build Docker images
        working-directory: ./src
        run: |
          docker build . --file Dogger/Dockerfile --tag dogger-image
          docker build . --file Dogger.Setup/Dockerfile --tag dogger-setup-image


      - name: Tag Docker images
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ffMathy --password-stdin

          docker tag dogger-image docker.pkg.github.com/dogger/app.dogger.io/dogger:${{github.sha}}
          docker tag dogger-image docker.pkg.github.com/dogger/app.dogger.io/dogger:latest

          docker tag dogger-setup-image docker.pkg.github.com/dogger/app.dogger.io/dogger-setup:${{github.sha}}
          docker tag dogger-setup-image docker.pkg.github.com/dogger/app.dogger.io/dogger-setup:latest


      - name: Push Docker images to Docker Hub
        working-directory: ./src
        run: |
          echo "Pushing images to Docker Hub."

          docker push docker.pkg.github.com/dogger/app.dogger.io/dogger
          docker push docker.pkg.github.com/dogger/app.dogger.io/dogger-setup


  deploy-app-dogger-io:
    name: Deploy app-dogger-io
    needs: [publish-app-dogger-io]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
          

      - name: Write secret files
        working-directory: ./src
        shell: bash
        env:
          ELK_CONFIGURATION_YML_CONTENTS: ${{secrets.ELK_CONFIGURATION_YML_CONTENTS}}

          DOGGER_ENV: ${{secrets.DOGGER_ENV}}
          ELASTICSEARCH_ENV: ${{secrets.ELASTICSEARCH_ENV}}
          KIBANA_ENV: ${{secrets.KIBANA_ENV}}

          ELK_ADMIN_KEY_CONTENTS: ${{secrets.ELK_ADMIN_KEY_CONTENTS}}
          ELK_ADMIN_PEM_CONTENTS: ${{secrets.ELK_ADMIN_PEM_CONTENTS}}
          ELK_NODE_KEY_CONTENTS: ${{secrets.ELK_NODE_KEY_CONTENTS}}
          ELK_NODE_PEM_CONTENTS: ${{secrets.ELK_NODE_PEM_CONTENTS}}
          ELK_ROOT_CA_KEY_CONTENTS: ${{secrets.ELK_ROOT_CA_KEY_CONTENTS}}
          ELK_ROOT_CA_PEM_CONTENTS: ${{secrets.ELK_ROOT_CA_PEM_CONTENTS}}

        run: |
            mkdir pwd
            mkdir pwd/certs
            mkdir pwd/config
            mkdir pwd/env

            echo "$ELK_CONFIGURATION_YML_CONTENTS" > ./pwd/config/elasticsearch.yml

            echo "$DOGGER_ENV" > ./pwd/env/dogger.env
            echo "$ELASTICSEARCH_ENV" > ./pwd/env/elasticsearch.env
            echo "$KIBANA_ENV" > ./pwd/env/kibana.env

            echo "$ELK_ADMIN_KEY_CONTENTS" > ./pwd/certs/admin.key
            echo "$ELK_ADMIN_PEM_CONTENTS" > ./pwd/certs/admin.pem
            echo "$ELK_NODE_KEY_CONTENTS" > ./pwd/certs/node.key
            echo "$ELK_NODE_PEM_CONTENTS" > ./pwd/certs/node.pem
            echo "$ELK_ROOT_CA_KEY_CONTENTS" > ./pwd/certs/root-ca.key
            echo "$ELK_ROOT_CA_PEM_CONTENTS" > ./pwd/certs/root-ca.pem


      - name: Deploy to app.dogger.io
        working-directory: ./src
        run: |
          echo "Starting dogfeed process."
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ffMathy --password-stdin
          
          DOGGER_TAG=${{github.sha}}\
          docker-compose\
            -f docker-compose.setup.yml\
            -f docker-compose.setup.app-dogger-io.yml\
            up

            #-e DOGFEED=true\
            #-e DOGFEED_Sql__ConnectionString="Server=dogger-mssql.cilzcbhfqhkd.eu-west-1.rds.amazonaws.com,1433;Database=dogger;User #Id=admin;Password=${{ secrets.SQL_PASSWORD }}"\
            #-e DOGFEED_Aws__SecretAccessKey="${{ secrets.AWS_SECRET_ACCESS_KEY }}"\
            #-e DOGFEED_Aws__AccessKeyId="${{ secrets.AWS_ACCESS_KEY_ID }}"\
            #-e DOGFEED_Aws__LightsailPrivateKeyPem="${{ secrets.AWS_LIGHTSAIL_PRIVATE_KEY_PEM }}"\
            #-e DOGFEED_Stripe__PublishableKey="${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}"\
            #-e DOGFEED_Stripe__SecretKey="${{ secrets.STRIPE_SECRET_KEY_LIVE }}"\
            #-e DOGFEED_Dogfeed__DockerHub__Username="ffMathy"\
            #-e DOGFEED_Dogfeed__DockerHub__Password="${{ secrets.GITHUB_TOKEN }}"\
            #-e DOGFEED_Dogfeed__DockerComposeYmlFilePaths__0="/src/docker-compose.deploy.yml"\
            #-e DOGFEED_Dogfeed__Elasticsearch__InstancePassword="${{ secrets.ELK_PASSWORD }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__ConfigurationYmlContents="${{ secrets.ELK_CONFIGURATION_YML_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__AdminKeyContents="${{ secrets.ELK_ADMIN_KEY_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__AdminPemContents="${{ secrets.ELK_ADMIN_PEM_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__AdminKeyPassword="${{ secrets.ELK_ADMIN_KEY_PASSWORD }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__NodeKeyContents="${{ secrets.ELK_NODE_KEY_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__NodePemContents="${{ secrets.ELK_NODE_PEM_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__RootCaKeyContents="${{ secrets.ELK_ROOT_CA_KEY_CONTENTS }}"\
            #-e DOGFEED_Dogfeed__Elasticsearch__RootCaPemContents="${{ secrets.ELK_ROOT_CA_PEM_CONTENTS }}"\
            #-e DOGFEED_Slack__IncomingUrl="${{ secrets.SLACK_INCOMING_URL }}"\
            #-e DOGFEED_Cloudflare__ApiKey="${{ secrets.CLOUDFLARE_KEY }}"\
            #-e DOGFEED_ASPNETCORE_ENVIRONMENT="Production"\
            #-e DOGFEED_LicenseKey="${{ secrets.GUMROAD_LICENSE_KEY }}"\
            #-e INSTANCE_Sql__ConnectionString="Server=dogger-mssql.cilzcbhfqhkd.eu-west-1.rds.amazonaws.com,1433;Database=dogger;User #Id=admin;Password=${{ secrets.SQL_PASSWORD }}"\
            #-e INSTANCE_Aws__SecretAccessKey="${{ secrets.AWS_SECRET_ACCESS_KEY }}"\
            #-e INSTANCE_Aws__AccessKeyId="${{ secrets.AWS_ACCESS_KEY_ID }}"\
            #-e INSTANCE_Aws__LightsailPrivateKeyPem="${{ secrets.AWS_LIGHTSAIL_PRIVATE_KEY_PEM }}"\
            #-e INSTANCE_Stripe__PublishableKey="${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}"\
            #-e INSTANCE_Stripe__SecretKey="${{ secrets.STRIPE_SECRET_KEY_LIVE }}"\
            #-e INSTANCE_Slack__IncomingUrl="${{ secrets.SLACK_INCOMING_URL }}"\
            #-e INSTANCE_Encryption__Pepper="${{ secrets.ENCRYPTION_PEPPER }}"\
            #-e INSTANCE_GitHub__PullDog__PrivateKey="${{ secrets.PULL_DOG_PRIVATE_KEY }}"\
            #-e INSTANCE_GitHub__PullDog__AppIdentifier="${{ secrets.PULL_DOG_APP_IDENTIFIER }}"\
            #-e INSTANCE_GitHub__PullDog__WebhookSecret="${{ secrets.PULL_DOG_WEBHOOK_SECRET }}"\
            #-e INSTANCE_GitHub__PullDog__ClientId="${{ secrets.PULL_DOG_CLIENT_ID }}"\
            #-e INSTANCE_GitHub__PullDog__ClientSecret="${{ secrets.PULL_DOG_CLIENT_SECRET }}"\
            #-e INSTANCE_Auth0__ClientId="${{ secrets.AUTHZERO_CLIENT_ID }}"\
            #-e INSTANCE_Auth0__ClientSecret="${{ secrets.AUTHZERO_CLIENT_SECRET }}"\
            #-e INSTANCE_ASPNETCORE_ENVIRONMENT="Production"\
            #-e INSTANCE_LicenseKey="${{ secrets.GUMROAD_LICENSE_KEY }}"\
            #-e DOGFEED=true\
            #docker.pkg.github.com/dogger/app.dogger.io/dogger-setup:${{github.sha}}