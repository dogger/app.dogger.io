name: Docker

on:
  push:
    branches:
      - master

    tags:
      - v*

  pull_request:

jobs:
  test:
    name: Run all tests
    runs-on: ubuntu-latest

    steps:      
      - name: 'Block concurrent executions'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml build
          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml config
          
          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml down
          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from=dogger-setup-tests --scale dogger-tests=0 --scale dogger=0

          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml down
          SQL_HOST=mssql-test-container docker-compose -f docker-compose.sql-server.yml -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from=dogger-tests --scale dogger-setup-tests=0 --scale dogger=0

      - name: Code coverage reporting for Dogger
        uses: codecov/codecov-action@v1
        with:
          file: ./TestResults/Dogger/coverage.opencover.xml

      - name: Code coverage reporting for Dogger.Setup
        uses: codecov/codecov-action@v1
        with:
          file: ./TestResults/Dogger.Setup/coverage.opencover.xml

  publish-app-dogger-io:
    name: Publish app-dogger-io
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'master')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Build Docker images
        run: |
          docker build . --file src/Dogger/Dockerfile --tag dogger-image
          docker build . --file src/Dogger.Setup/Dockerfile --tag dogger-setup-image


      - name: Tag Docker images
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ffMathy --password-stdin

          docker tag dogger-image docker.pkg.github.com/dogger/app.dogger.io/dogger:${{github.sha}}
          docker tag dogger-image docker.pkg.github.com/dogger/app.dogger.io/dogger:latest

          docker tag dogger-setup-image docker.pkg.github.com/dogger/app.dogger.io/dogger-setup:${{github.sha}}
          docker tag dogger-setup-image docker.pkg.github.com/dogger/app.dogger.io/dogger-setup:latest


      - name: Push Docker images to Docker Hub
        run: |
          echo "Pushing images to Docker Hub."

          docker push docker.pkg.github.com/dogger/app.dogger.io/dogger
          docker push docker.pkg.github.com/dogger/app.dogger.io/dogger-setup


  deploy-app-dogger-io:
    name: Deploy app-dogger-io
    needs: [publish-app-dogger-io]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
          
      - name: Write secret files
        shell: bash
        env:
          DOGGER_ENV: ${{secrets.DOGGER_ENV}}
          
          LIGHTSAIL_PRIVATE_KEY_PEM: ${{secrets.LIGHTSAIL_PRIVATE_KEY_PEM}}
          PULL_DOG_PRIVATE_KEY: ${{secrets.PULL_DOG_PRIVATE_KEY}}

        run: |
            mkdir certs
            mkdir env

            echo "$DOGGER_ENV" > ./env/dogger.env
            
            echo "$LIGHTSAIL_PRIVATE_KEY_PEM" > ./certs/lightsail.pem
            echo "$PULL_DOG_PRIVATE_KEY" > ./certs/pull-dog.pem

      - name: Deploy to app.dogger.io
        run: |
          echo "Starting dogfeed process."
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ffMathy --password-stdin
          
          Dogfeed__Tag=${{github.sha}} \
          Dogfeed__DockerRegistry__Username=ffmathy \
          Dogfeed__DockerRegistry__Password="${{ secrets.GITHUB_TOKEN }}" \
          docker-compose \
            -f docker-compose.setup.yml \
            -f docker-compose.setup.app-dogger-io.yml \
            up
